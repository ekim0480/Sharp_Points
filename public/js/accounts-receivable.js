$(document).ready(function () {
  // saleContainer holds all of our sales
  var saleContainer = $("#sale-container");
  var saleList = $("#saleTableBody");

  // code block to get user admin status
  var hasAdmin;

  // Variable to hold our sales
  var sales;

  // click event listener for pay in full link
  $(document).on("click", "#payInFull", handlePayInFull);

  // initialize page
  getUser();
  getSales();

  // function to handle payInFull link
  function handlePayInFull() {
    var saleId = $(this).closest("tr").children("td:nth-child(2)").text();
    var paymentAmount = $(this)
      .closest("tr")
      .children("td:nth-child(10)")
      .text();
    var existingNote = $(this).closest("tr").children("td:nth-child(3)").text();

    var today = new Date();
    var dd = String(today.getDate()).padStart(2, "0");
    var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
    var yyyy = today.getFullYear();

    today = mm + "/" + dd + "/" + yyyy;

    var paymentRecord = `PAID IN THE AMOUNT OF $${paymentAmount} ON ${today}.`;
    var confirmPayInFull = confirm(`Confirm payment of $${paymentAmount}?`);
    var autoGeneratedNote = existingNote + "\r\n" + "\r\n" + "***" + paymentRecord + "***" + "\r\n" + "***" + "PAID IN FULL" + "***"

    if (confirmPayInFull) {
      var payInFull = {
        id: saleId,
        accountsReceivable: "0.00",
        notes: autoGeneratedNote
      };

      $.ajax({
        method: "PUT",
        url: "/payInFull",
        contentType: "application/json",
        data: JSON.stringify(payInFull),
        dataType: "json",
      }).then(function () {
        window.location.href = "/saleUpdate?sale_id=" + saleId + "#notesInput"
      })

      // $(this).closest("tr").remove();
    }
    // console.log(paymentAmount)
    // console.log("sales", sales)
  }

  function getUser() {
    $.get("/userData", function (data) {
      // reassign global variable
      hasAdmin = data.hasAdmin;
      // if admin, add profits link to navbar
      if (hasAdmin == true) {
        $("#profitsNav").append(
          '<a class="nav-link" href="/profits">Profits</a>'
        );
      }
    });
    return hasAdmin;
  }

  // This function grabs sales from the database and updates the view
  function getSales() {
    $.get("/sales", function (data) {
      console.log("Sales", data);
      sales = data;
      initializeRows();
    });
  }

  // function to create rows for each sale and prepare them to be inserted into the sales table
  function createSaleRow(saleData) {
    // console.log(saleData);
    // console.log(saleData.origin)
    var newTr = $("<tr>");

    // add class for paginating with simplePagination.js
    // newTr.addClass("paginate");

    newTr.data("sale", saleData);
    newTr.append("<td class='tableHeadId'>" + saleData.Customer.id + "</td>");
    newTr.append("<td class='tableHeadId'>" + saleData.id + "</td>");
    newTr.append("<td class='tableHeadId'>" + saleData.notes + "</td>");
    newTr.append(
      "<td>" +
        saleData.Customer.lastName +
        ", " +
        saleData.Customer.firstName +
        "</td>"
    );
    newTr.append("<td>" + saleData.type + "</td>");
    newTr.append("<td>" + saleData.origin + "</td>");
    newTr.append("<td>" + saleData.depDetails + "</td>");
    newTr.append("<td>" + saleData.depDate + "</td>");
    newTr.append("<td>" + saleData.saleAmount + "</td>");
    newTr.append("<td>" + saleData.accountsReceivable + "</td>");

    // add view/edit link, link will automatically jump to ar input
    newTr.append(
      "<td><a href='/saleUpdate?sale_id=" +
        saleData.id + 
        "#accReceivableInput" +
        "'>View/Edit</a></td>"
    );
    // add pay in full link
    newTr.append(
      "<td><a style='cursor:pointer;color:green' id='payInFull'>Pay in Full</a></td>"
    );
    return newTr;
  }

  // InitializeRows handles appending all of our constructed sale HTML inside saleContainer
  // also adds all points and displays total value
  function initializeRows() {
    // saleContainer.empty();
    var salesToAdd = [];
    for (var i = 0; i < sales.length; i++) {
      // filter to show only sales with outstanding AR
      if (sales[i].accountsReceivable > 0) {
        salesToAdd.push(createSaleRow(sales[i]));
      }
    }
    // if there are no sales, run displayEmpty
    if (!salesToAdd || !salesToAdd.length) {
      displayEmpty();
    } else {
      renderSaleList(salesToAdd);
    }
    console.log(salesToAdd);
  }

  // function to render sales rows, if present
  function renderSaleList(rows) {
    saleList.children().not(":last").remove();
    saleContainer.children(".alert").remove();
    // console.log(rows.length);
    saleList.prepend(rows);

    // table pagination
    $("#saleTable").fancyTable({
      sortColumn: 8,
      pagination: true,
      paginationClass: "btn btn-link",
      sortable: false,
      perPage: 10,
      globalSearch: true,
      // exclude first 2 columns, which are hidden and hold customer and
      // sale id values, and last 2 columns, which are links to view/delete
      globalSearchExcludeColumns: [1, 2, 3, 11, 12],
      inputPlaceholder: "Search All...",
    });
  }

  // // function to handle editing customer's details
  // function handleEditDetails() {
  //   // extract customerid from url
  //   var url = window.location.search;
  //   var customerId;
  //   if (url.indexOf("?customer_id=") !== -1) {
  //     customerId = url.split("=")[1];
  //   }
  //   // send user to corresponding customer's update page
  //   window.location.href = "/customerUpdate?customer_id=" + customerId;
  // }

  // This function handles the sale delete
  // function handleSaleDelete() {
  //   // workaround because fancyTable.js was messing with our jquery data
  //   // storage.  Included hidden columns containing both customer and
  //   // sale ids, and referred to text in "nth" columns to retreive the
  //   // necessary data.
  //   var customerId = $(this)
  //     .parent("td")
  //     .parent("tr")
  //     .children("td:first")
  //     .text();
  //   var saleId = $(this)
  //     .parent("td")
  //     .parent("tr")
  //     .children("td:nth-child(2)")
  //     .text();

  //   // grabbing values we need to update Customer's total point value after
  //   // subtracting the current sale's point value from the Customer's
  //   // original total point value.
  //   var customerOriginalTotalPoints = parseInt($("#pointTotal").text());
  //   var salePointValue = parseInt(
  //     $(this).parent("td").parent("tr").children("td:nth-child(11)").text()
  //   );
  //   // console.log(salePointValue)

  //   // perform math to subtract this sale's points from the Customer's
  //   // original total points, and prepare to make put request
  //   var customerPointTotalAfterDelete = (
  //     customerOriginalTotalPoints - salePointValue
  //   ).toString();

  //   // prepare as object to be sent in ajax put call
  //   var updatedPoints = {
  //     customerId: customerId,
  //     finalPoints: customerPointTotalAfterDelete,
  //   };

  //   // show confirm window to ask user to confirm the deletion
  //   var confirmDelete = confirm("Confirm delete of sale?");
  //   // if user confirms, make the ajax call to delete the sale
  //   if (confirmDelete) {
  //     $.ajax({
  //       method: "DELETE",
  //       url: "/sales/" + saleId,
  //     });
  //     // make ajax call to update customer's total points value
  //     // with minus deleted sale
  //     $.ajax({
  //       method: "PUT",
  //       url: "/addPoints",
  //       contentType: "application/json",
  //       data: JSON.stringify(updatedPoints),
  //       dataType: "json",
  //     }).then(function () {
  //       // refresh page
  //       location.reload();
  //     });
  //   }
  // }

  // This function displays a message when there are no sales
  function displayEmpty() {
    var alertDiv = $("<div>");
    $("#saleTable tbody").empty();
    alertDiv.addClass("alert alert-success");
    alertDiv.html("No Outstanding Payments Found");
    $("#sale-container").append(alertDiv);
  }
});
